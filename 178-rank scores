Table: Scores

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| score       | decimal |
+-------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table contains the score of a game. Score is a floating point value with two decimal places.
 

Write a solution to find the rank of the scores. The ranking should be calculated according to the following rules:

The scores should be ranked from the highest to the lowest.
If there is a tie between two scores, both should have the same ranking.
After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.
Return the result table ordered by score in descending order.

The result format is in the following example.

 

Example 1:

Input: 
Scores table:
+----+-------+
| id | score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+
Output: 
+-------+------+
| score | rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+

solution：

SELECT S.Score, COUNT(S2.Score) as `Rank` --表达式COUNT(S2.Score)用于统计满足 WHERE 子句中条件的行数，
FROM Scores S,
(SELECT DISTINCT Score FROM Scores) S2
WHERE S.Score<=S2.Score
GROUP BY S.Id
ORDER BY S.Score DESC;
--首先将分数进行降序排列得到第一列的输出score，查询的主要部分在 WHERE 子句中。它将“Scores”表（S.Score）中的每个分数与“S2”子查询（S2.Score）中的每个不同分数进行比较。它会计算小于或等于当前分数的分数数量，从而有效地为您提供排名。
例如，如果“分数”表中的分数为 85，并且子查询中有 42 个不同的分数大于或等于 85，则该分数的计数将为 42，即它的等级。对“分数”表中的每个分数重复此过程，从而产生分数及其相应排名的列表。

更简单的方法:窗口函数
Select score, dense_rank() over (Order By score DESC) as 'rank' from Scores ;
